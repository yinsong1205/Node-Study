// 模块化
// 模块化是指解决一个复杂问题时，自顶向下逐层把系统划分为若干模块的过程。
// 对整个系统来说,模块化是可组合,分解和更改的单元.

// 编程里面的模块化
// 编程领域的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块

// 把代码进行模块化拆分的好处
// 1.提高了代码的复用性
// 1.提高了代码的可维护性
// 1.可以实现按需加载

// Node.js模块分类
// 1.内置模块（内置模块是由Node.js官方提供的，例如fs,path,http等）
// 2.自定义模块（用户创建的每个.js文件，都是自定义模块）
// 3.第三方模块（由第三方开发出来的模块。并非官网提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）

// 加载模块
// 使用require()方法，可以加在需要的内置模块，用户自定义模块，第三方模块进行使用，例如
// 当使用require()方法加载其他模块时，会执行被加载模块中的代码
// 使用用户自定义模块可以省略.js后缀
const fs = require('fs')
const ceshi = require('./files/15ceshi')


// 模块作用域
// 和函数作用域类似,在自定义模块中定义的变量,方法等成员,只能在当前模块内被访问,这种模块级别的访问限制,叫做模块作用域

// 模块作用于的好处
// 防止了全局变量污染的问题
const username = "张三"
function sayhello(){
    console.log('大家好，我是' + username)
}


const username = "张三"
console.log('大家好，我是' + username)